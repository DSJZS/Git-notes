*忽略文件 -- .gitignore
*一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创
*建一个名为 .gitignore 的文件，列出要忽略的文件模式。

命令总结(非全部命令)
命令
|
|
|										作用
git config --global user.name 用户名					为计算机上的每个存储库设置 Git 用户名签名(可能是非真实的，只是标注)
git config  user.name 用户名						为一个仓库设置 Git 用户名签名(可能是非真实的，只是标注)
git config --global user.email 邮箱					为计算机上的每个存储库设置 Git 邮箱签名(可能是非真实的，只是标注)
git config  user.email 邮箱						为一个仓库设置 Git 用户名签名(可能是非真实的，只是标注)
|
|
|
git init									初始化新仓库
|
|
|
git clone [仓库网址]							克隆[仓库网址]处的仓库
|
|
|
git status									(可指定文件) 检查当前文件状态
git diff									(可指定文件) 比较工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化  
	-----									内容
git diff --cached								(可指定文件) 看已经暂存起来的文件和上次提交时的快照之间的差异
|
|
|
git add									(可指定文件) 这是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文  
	-----									件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等
git commit									(可指定文件) 提交暂存区文件到本地库(会启动文本编辑器以便输入本次提交的说明);或者完成冲突合并提交
git commit -m "日志信息"						(可指定文件) 提交暂存区文件到本地库，并提交日志信息说明
git commit -a -m "日志信息"						(可指定文件) 暂存已经跟踪过的文件并提交到本地库，并提交日志信息说明
|
|
|
git rm 文件名								将从 Git 中移除某个文件的操作放入暂存库 (同时如果该文件在本地存在，删除它)
git rm -f 文件名								强制 将从 Git 中移除某个文件的操作放入暂存库 (同时如果该文件在本地存在，删除它)
	-----									( 用于 删除之前修改过并且已经放到暂存区域 等情况 )
 git rm --cached 文件名 							将从 Git 中移除某个文件的操作放入暂存库 或者 将某个文件从 Git暂存区 移出 (均不会删除本地文件)
|
|
|
git mv 文件本名 文件改名							在 Git 中对文件改名 (影响本地和Git)
*(pro git 中描述,上述命令等同于下面三行，如此分开操作，Git 也会意识到这是一次改名)
$ mv README.txt README
$ git rm README.txt
$ git add README
|
|
|
git log									查看提交历史
git log -p -n									查看最近 n 次提交的历史
git log --stat								查看提交历史( 仅显示简要的增改行数统计 )
get log --pretty=xxx							xxx 为 oneline一行显示 short精简显示 full详细显示 fuller超详细显示 用对应的非常规模式查看提交历史
git log --pretty=format:"占位符列表"					定制要显示的记录格式输出提交历史( 占位符看 附录1 文件 )
*注意：用 oneline 或 format 时结合 --graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。
*注意：以上只是简单介绍了一些 git log 命令支持的选项。附录2 文件 还列出了一些其他常用的选项及其释义。
*注意：另外还有一个时间、作者、提交人设置方面的选项，在附录3文件中
|
|
|
git commit --amend							修改最后一次提交：1.提交(commit)后立刻输入该命令可以修改日志信息(文件内容要相同不能改变)  
	-----									2.如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交：如下  
	-----									$ git commit -m 'initial commit'   
	-----									$ git add forgotten_file  
	-----									$ git commit --amend  
	-----									上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。  
	-----									简而言之，就是撤销上一次提交 ，并将上次提交的和现在暂存区文件重新提交
|
|
|
git reset HEAD 文件名							取消某一个文件的暂存(或者说取消暂存区域中的某一个文件）
git checkout -- 文件名							取消某一个文件的修改，如果它修改后没放暂存区，就回退到本地库一样的状态  
	-----									如果放到暂存区后又修改，则回退到暂存区一样的状态
|
|
|
Git克隆完某个项目后，至少可以看到一个别名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库
git remote									列出每个远程库的简称(别名)
git remote -v								列出每个远程库的简称(别名) 和 其对应的远程库地址
git remote add 简称(别名) 远程库地址					添加一个新的远程仓库并为其指定一个简称(别名)
git remote show 远程库简称或地址					查看远程库消息
git remote rename	 原简称 新简称					改某个远程仓库在本地的简称
git remote rm 远程库简称或地址						移除对应的远端仓库
git fetch 远程库简称或地址						(可指定分支)将远程库的更新数据拉到本地仓库，并不自动合并到当前工作分支   ps: pro git 3.5
git pull 远程库简称或地址							(可指定分支)将远程库的更新数据拉到本地仓库，自动合并到本地仓库中当前分支
git push 远程库简称或地址 本地分支名					将某一个分支推送到远程库的一个同名分支
git push origin 远程库简称或地址 本地分支名:远程分支名		将某一个分支推送到远程库的一个指定的不同名分支 ps: 不写本地分支名该命令会删除指定的远程分支
|
|
|
* tag简略介绍：tag是git版本库的一个标记，指向某个commit的指针。  
* tag主要用于发布版本的管理，一个版本发布之后，我们可以为git打上 v.1.0.1 v.1.0.2 …这样的标签。  
*
git tag									列显已有的标签
git tag -a 标签名 -m '版本号附注'					创建一个有含附注的标签
git tag -s 标签名 -m '版本号附注'					用 GPG 来创建一个有含附注的标签
git tag 标签名								创建一个轻量级标签
git show 标签名								查看相应标签的版本信息，并连同显示打标签时的提交对象
git tag -v 标签名								验证标签
git tag -a 标签名 校验和							为一个项目打上标签
git push 远程库简称或地址 标签名					推送某个标签到远程库
git push 远程库简称或地址 --tags					推送全部标签到远程库
|
|
|
git branch									查看当前所有分支
git branch -v								查看当前所有分支，和各个分支最后一个提交对象的信息
git branch 分支名								新建一个分支(新建的分支指向当前分支指向的commit对象，而HEAD指针仍指向当前分支)
git checkout 分支名							从当前分支切换到其它分支(HEAD指针指向目标分支)
git checkout -b 分支名							新建一个分支，并且切换到该分支
*(注意：以上的第五条命令相当于第三条和第四条命令之和)
git merge 分支名								将一个远程或者本地分支与当前分支合并
git branch -d 分支名							删掉一个分支
git branch -D 分支名							强制删除一个分支
git branch --merge							查看哪些分支已被并入当前分支
git branch --no-merged							查看哪些分支还没有被并入当前分支
git push 远程库简称或地址 :远程分支名					删除远程库的某一个分支
git rebase 基底分支								当前分支以基底分支的最后一个提交对象为基底进行"衍合"操作 ps: pro git 3.6
git rebase --onto 新基底分支 原基地分支 分支			将取出分支后，找出分支和原基底分支共同祖先之后的变化，然后把它们在 新基底分支上重演一遍 ps: pro git 3.6
git rebase 基底分支 特性分支						当前特性分支以基底分支的最后一个提交对象为基底进行"衍合"操作 ps: pro git 3.6
|
|
|